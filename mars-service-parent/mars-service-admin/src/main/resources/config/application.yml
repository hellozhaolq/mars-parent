# 外部应用属性优先级 https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config-application-property-files

# Oracle 19c，
# https://docs.oracle.com/en/database/oracle/oracle-database/21/jjdbc/index.html
# https://docs.oracle.com/en/database/oracle/oracle-database/21/books.html
# MySQL 8.0
# https://dev.mysql.com/doc/index-connectors.html
# https://www.runoob.com/java/java-mysql-connect.html
# PostgreSQL 15
# 驱动程序不需要显示加载，详见 https://jdbc.postgresql.org/documentation/use/
#
#
# jdbc:postgresql://192.168.0.5:5432/dbname?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&useSSL=false
# MySQL连接url配置属性，https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-configuration-properties.html

#3种网络编程的I/O模型，根据不同的业务场景和性能需求决定选择不同的I/O模型
#  BIO(blocking I/O): 同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销。
#  NIO(Non-blocking I/O也称New I/O): 同步非阻塞，服务器实现模式为一个线程处理多个请求，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求就进行处理
#  AIO(NIO 2): 异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是先由操作系统完成后才通知服务端程序启动线程进行处理，一般适用于连接数较多且连接时间较长的应用

server:
  port: 60001
  servlet: # servlet容器通用配置
    context-path: /@project.name@
    encoding:
      charset: UTF-8 # 默认UTF-8
      force: true
      enabled: true
    session:
      timeout: 30m
  tomcat: # Tomcat特有配置，从jconsole的线程名字可以看到tomcat使用的是nio
    uri-encoding: UTF-8 # 默认UTF-8
    threads:
      min-spare: 10 # 初始线程数
      max: 200 # 最大线程数。示例：1核2g内存为200。CPU越不密集值越大；更多的线程会带来更多的线程上下文切换成本；JVM中默认创建新线程时会分配大小为1M的线程栈，更多的线程异味着需要更多的内存；
    accept-count: 0 # 最大等待数，当连接数达到最大值maxConnections后，新连接会放到等待队列acceptor中。当队列已满时，任何连接请求都将被拒绝(connection refused)
    max-connections: 1 # 服务器最多能接受和处理的并发连接数(并发量=TomcatSocket连接数)。一般这个值大于(maxThreads)+(acceptCount)。在不改变硬件性能的情况下，并发量的提升必定以牺牲响应时间为代价。
    connection-timeout: 60s # 网络连接超时时间
    keep-alive-timeout: 60s # 长连接超时时间，从最后一个HTTP请求完开始算，默认使用connectionTimeout。相关请求头 Connection:keep-alive、Keep-Alive: timeout=60
    max-keep-alive-requests: 100 # 一个长连接的最大请求数
    # Tomcat最大连接数 = maxConnections + acceptCount
    # 比如 maxThreads=200、maxConnections=1、accept-count=1，假设某一瞬间的并发是5，那么最终Tomcat的执行线程数将会是1个（同时处理1个请求），1个进入acceptor队列排队，另外3个被拒掉
    mbeanregistry:
      enabled: true # 默认禁用 JMX Tomcat Bean 暴露。MBean代表一个被管理的资源实例，通过MBean中暴露的方法和属性，外界可以获取被管理的资源的状态和操纵MBean的行为。
    max-http-form-post-size: -1 # 任何 HTTP 发布请求中表单内容的最大大小。
    max-swallow-size: 2 # 最大请求正文





################ 集成JMX配置：https://www.liaoxuefeng.com/wiki/1252599548343744/1282385687609378 ##############
management:
  server:
    port: 50001
    ssl:
      enabled: false
  endpoint:
    health:
      show-details: always
    shutdown:
      enabled: true # 启用接口关闭 Spring Boot
  endpoints:
    enabled-by-default: true # 默认情况下是启用还是禁用所有监控点
    web:
      base-path: /actuator # 启用单独的url地址来监控 Spring Boot 应用，默认是 "/actuator"。http://127.0.0.1:50001/actuator
      exposure:
        include: "*" # 打开所有的监控点
    jmx:
      exposure:
        include: "*"

spring:
  application:
    name: @project.name@
  profiles:
    active: @profiles.active@
  jmx:
    enabled: true
  mustache:
    view-names:
  servlet:
    multipart:
      enabled: true
      max-file-size: 2048MB
      max-request-size: 2048MB
  aop:
    proxy-target-class: true # true:Cglib代理; false:JDK动态代理; {@link org.springframework.boot.autoconfigure.aop.AopAutoConfiguration}

# 自定义swagger配置
swagger:
  enable: true
  application-name: ${spring.application.name}
  application-version: @project.version@
  application-description: @project.description@
  try-host: http://localhost:${server.port}

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    path: /swagger-ui.html # http://127.0.0.1:60001/mars-service-admin/swagger-ui.html


