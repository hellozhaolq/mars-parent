<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!--*********************************************************************************************-->
    <!--********* https://maven.apache.org/pom.html                                             *****-->
    <!--********* https://maven.apache.org/guides/introduction/introduction-to-the-pom.html     *****-->
    <!--********* https://maven.apache.org/settings.html                                        *****-->
    <!--*********************************************************************************************-->
    <modelVersion>4.0.0</modelVersion>

    <!--
        为了避免环境不兼容导致莫名问题，建议不要手动更新maven插件版本，而是使用spring-boot-dependencies中的版本。
        其他依赖版本可在properties中重新定义。
     -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>2.7.9</version> <!-- springboot版本 -->
    </parent>

    <groupId>com.zhaolq.mars</groupId>
    <artifactId>mars-parent</artifactId>
    <version>1.0.0-deluxe</version>

    <packaging>pom</packaging>

    <name>${project.artifactId}</name>
    <url>https://blog.zhaolq.com</url>
    <description>火星计划</description>

    <modules>
        <module>mars-common-parent</module>
        <module>mars-demo-parent</module>
        <module>mars-service-parent</module>
        <module>mars-api-parent</module>
    </modules>

    <properties>
        <java.version>17</java.version> <!-- 对应的Maven版本 https://maven.apache.org/docs/history.html -->

        <!-- 自定义构建时间戳的格式。${maven.build.timestamp}的默认格式 yyyy-MM-dd'T'HH:mm:ss'Z'。UTC时间非UTC+8。 -->
        <maven.build.timestamp.format>yyMMdd</maven.build.timestamp.format>

        <maven.compiler.release>${java.version}</maven.compiler.release>  <!-- 优先级低于maven-compiler-plugin插件中的配置 -->
        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <!-- maven-resources-plugin将自动使用此编码 -->
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> <!-- 配置所有Maven插件输出的报告编码 -->

        <spring-cloud-dependencies.version>2021.0.6</spring-cloud-dependencies.version>

        <bcel.version>6.7.0</bcel.version>
        <commons-beanutils.version>1.9.4</commons-beanutils.version>
        <commons-cli.version>1.5.0</commons-cli.version>
        <commons-codec.version>1.15</commons-codec.version>
        <commons-collections4.version>4.4</commons-collections4.version>
        <commons-compress.version>1.23.0</commons-compress.version>
        <commons-configuration2.version>2.9.0</commons-configuration2.version>
        <commons-crypto.version>1.2.0</commons-crypto.version>
        <commons-csv.version>1.10.0</commons-csv.version>
        <commons-dbcp2.version>2.9.0</commons-dbcp2.version>
        <commons-dbutils.version>1.7</commons-dbutils.version>
        <commons-email.version>1.5</commons-email.version>
        <commons-exec.version>1.3</commons-exec.version>
        <commons-fileupload.version>1.5</commons-fileupload.version>
        <commons-io.version>2.13.0</commons-io.version>
        <commons-jcs3.version>3.1</commons-jcs3.version>
        <commons-lang3.version>3.12.0</commons-lang3.version>
        <commons-math3.version>3.6.1</commons-math3.version>
        <commons-net.version>3.9.0</commons-net.version>
        <commons-numbers-bom.version>1.1</commons-numbers-bom.version>
        <commons-pool2.version>2.11.1</commons-pool2.version>
        <commons-proxy.version>1.0</commons-proxy.version>
        <commons-statistics-distribution.version>1.0</commons-statistics-distribution.version>
        <commons-text.version>1.10.0</commons-text.version>
        <commons-vfs2.version>2.9.0</commons-vfs2.version>
        <tika-core.version>2.8.0</tika-core.version>

        <fastjson2.version>2.0.51</fastjson2.version>

        <springdoc-openapi-ui.version>1.7.0</springdoc-openapi-ui.version>
        <rocketmq-spring-boot-starter.version>2.2.3</rocketmq-spring-boot-starter.version>

        <!-- MyBatis-Plus和boot-starter版本号对应 -->
        <mybatis-plus-boot-starter.version>3.5.1</mybatis-plus-boot-starter.version>
        <mybatis-plus-generator.version>3.5.1</mybatis-plus-generator.version>
        <!-- MyBatis分页插件PageHelper -->
        <pagehelper-spring-boot-starter.version>1.4.1</pagehelper-spring-boot-starter.version>

        <auto-service.version>1.0.1</auto-service.version>
        <javapoet.version>1.13.0</javapoet.version>

        <disruptor.version>3.4.2</disruptor.version>
        <poi.version>4.1.2</poi.version>

        <selenium-java.version>4.1.4</selenium-java.version>
        <jsoup.version>1.15.1</jsoup.version> <!-- jsoup是一个用于解析、提取、操作HTML的开源Java函式库。 -->
        <webdrivermanager.version>5.1.1</webdrivermanager.version>
    </properties>

    <dependencies>
        <!-- 为了避免循环依赖，请不要依赖子模块 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <!-- 此包由调用者/容器提供，不参与打包 -->
            <scope>provided</scope>
            <!-- 与compile相比，此依赖不参与编译，jar包中的类只能通过反射之类的方式使用。jdbc驱动可以使用runtime的scope，因为只有在真正运行的时候才会调用到驱动的代码。 -->
            <!-- <scope>runtime</scope> -->
            <!-- 此依赖可选。用来控制依赖是否向下传递 -->
            <!-- <optional>true</optional> -->
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <!-- 排除对 JUnit 4 的支持 -->
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springdoc</groupId>
                <artifactId>springdoc-openapi-ui</artifactId>
                <version>${springdoc-openapi-ui.version}</version>
            </dependency>

            <!-- 覆盖应写在上面 -->
            <!--<dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope> <!-- https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html -->
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <!-- 此元素指定包含项目源的目录。生成的构建系统将在构建项目时编译此目录中的源代码。给定的路径是相对于项目描述符的。 -->
        <!--<sourceDirectory>${project.basedir}/src/main/java</sourceDirectory>-->
        <!-- 构建生成的所有文件都放置在这个目录。 -->
        <!--<directory>${project.basedir}/target/${project.version}</directory>-->
        <!-- 打包的文件名（不包括扩展名，并且没有路径信息），这里配置成与项目名称相同。默认值是 ${artifactId}-${version} -->
        <finalName>${project.artifactId}-${project.version}_${maven.build.timestamp}</finalName>
        <!-- 此元素描述了所有 classpath 路径下资源，例如：.java文件、与项目关联的属性文件等。这些资源通常包含在最终软件包中。
        用以规定哪些文件可以编译到target/classes。打包插件默认把target/classes目录下的所有内容打进jar包或者war包。修改配置后请确认target/classes目录内容。 -->
        <resources>
            <!-- 控制资源文件的拷贝(默认复制到classes目录，最后打进jar包) -->
            <resource>
                <!-- 设定主资源目录  -->
                <directory>${project.basedir}/src/main/java</directory>
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目录下的资源文件时，只处理如下配置中包含的资源类型 -->
                <includes>
                    <include>**/*.xml</include>
                    <include>**/*.properties</include>
                </includes>
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目录下的资源文件时，不处理如下配置中包含的资源类型（剔除下如下配置中包含的资源类型）-->
                <excludes>
                    <exclude>**/*.yaml</exclude>
                </excludes>
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，是否对主资源目录开启资源过滤 -->
                <filtering>true</filtering>
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，指定处理后的资源文件输出目录，默认是${project.build.outputDirectory}指定的目录-->
                <targetPath>${project.build.outputDirectory}</targetPath>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <filtering>true</filtering>
                <targetPath>${project.build.outputDirectory}</targetPath>
            </resource>

            <!-- 配置文件外置，即提取配置文件到target目录。下面的配置是默认的，注释后效果相同 -->
            <resource>
                <directory>${project.basedir}/src/main/resources/config</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <targetPath>${project.basedir}/target/config</targetPath>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources/deployment/config</directory>
                <includes>
                    <include>*.ini</include>
                </includes>
                <targetPath>${project.basedir}/target/config</targetPath>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources/deployment/bin</directory>
                <includes>
                    <include>*.sh</include>
                </includes>
                <targetPath>${project.basedir}/target/bin</targetPath>
            </resource>
        </resources>

        <plugins>
            <!--
                为了使项目结构更为清晰，Maven区别对待Java代码文件和资源文件：
                    maven-compiler-plugin用来编译Java代码
                    maven-resources-plugin资源插件处理项目资源到输出目录的复制。有两种不同的资源：主资源和测试资源。区别在于，主要资源是与主要源代码关联的资源，而测试资源是与测试源代码关联的资源。
                    参考链接：https://blog.csdn.net/u011781521/article/details/79052725
                idea中maven-compiler-plugin插件编译时控制台乱码问题参考链接：
                    https://blog.csdn.net/qq_37823003/article/details/109480305
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <!-- 新的release选项从JDK9开始支持(详见源码since标签)，该选项替换了三个标志：-source，-target和-bootclasspath -->
                    <release>${maven.compiler.release}</release>
                    <encoding>${maven.compiler.encoding}</encoding>
                    <fork>true</fork>
                    <!-- 跳过编译的文件 -->
                    <excludes>
                        <exclude>**/ExcludeClassesName.java</exclude> <!-- 排除应用程序编译类 -->
                    </excludes>
                </configuration>
            </plugin>
            <!-- 解决资源文件的编码问题 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-resources-plugin.version}</version>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <useDefaultDelimiters>true</useDefaultDelimiters>
                </configuration>
            </plugin>
        </plugins>

        <pluginManagement>
            <plugins>
                <!-- 打源码包 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${maven-source-plugin.version}</version>
                    <configuration>
                        <outputDirectory>${project.build.directory}</outputDirectory>
                        <finalName>${project.build.finalName}</finalName>
                        <attach>true</attach>
                    </configuration>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <!-- 可以绑定到声明周期阶段deploy，默认是package。避免在package时执行此插件目标 -->
                            <phase>install</phase>
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- 生成javadoc文档 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven-javadoc-plugin.version}</version>
                    <configuration>
                        <release>${java.version}</release>
                        <charset>UTF-8</charset>
                        <encoding>UTF-8</encoding>
                        <docencoding>UTF-8</docencoding>
                        <doclint>none</doclint>
                    </configuration>
                    <executions>
                        <execution>
                            <id>attach-javadocs</id> <!-- 唯一标识，运行maven时会在控制台输出 -->
                            <!-- 可以绑定到声明周期阶段deploy，默认是package。避免在package时执行此插件目标 -->
                            <phase>install</phase>
                            <goals>
                                <!-- 绑定到此插件的jar目标。jar和javadoc-no-fork区别：
                                        jar目标默认绑定到生命周期阶段package，会生成JavaDoc文档并捆绑到jar文件中。
                                        javadoc-no-fork目标需要在站点生成之前生成源，例如，通过调用mvn clean deploy site。生成的JavaDoc文档在target/site下，不会捆绑到jar文件中。 -->
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- default声明周期的test阶段默认绑定了maven-surefire-plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                    <configuration>
                        <skipTests>true</skipTests>
                        <argLine>-Dfile.encoding=UTF-8</argLine>
                        <parallel>all</parallel>
                        <threadCount>10</threadCount> <!-- 与parallel参数结合使用 -->
                        <!-- 设置为错误/失败计数以跳过其余测试 -->
                        <skipAfterFailureCount>1</skipAfterFailureCount> <!-- 当有一个测试用例发生错误或失败时，跳过后续其他测试 -->
                        <!-- 测试失败后的重试次数。当测试含有远程服务时，在某些情况下可能由于环境问题(比如网络)导致测试用例执行失败，但这并不是程序问题。换句话说,当一个测试用例执行N次,有一次执行成功就认为成功. -->
                        <rerunFailingTestsCount>2</rerunFailingTestsCount> <!-- 两次重试机会 -->
                        <includes>
                            <include>*</include>
                        </includes>
                        <excludes>
                            <exclude>**/mapper/*</exclude>
                            <exclude>**/controller/*</exclude>
                            <exclude>**/service/*</exclude>
                        </excludes>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <repositories>
    </repositories>

    <pluginRepositories>
    </pluginRepositories>

    <distributionManagement>
    </distributionManagement>


    <!--
        POM 文件中的属性，在项目资源文件中使用${project.artifactId}，编译时会被替换，如properties、yml、xml。【编译时】
        Properties 文件中的属性，需手动加载到系统属性，再通过 System.getProperties() 获得。【运行时】
    -->
    <profiles>
        <profile>
            <id>dev-home</id>
            <properties>
                <profiles.active>dev</profiles.active>
                <mars.java.home>${env.JAVA_HOME}</mars.java.home>
                <mars.os.name>${os.name}</mars.os.name>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>

        <profile>
            <id>sit-company</id>
            <properties>
                <profiles.active>sit</profiles.active>
            </properties>
        </profile>

        <profile>
            <id>repo-home</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <!-- ********************************************* 仓库配置 start ********************************************* -->
            <!-- pom.xml和settings.xml中的repositories和pluginRepositories标签通用 -->
            <!--
                远程仓库，可以在Settings里配置。优点是全局统一配置，缺点是不受你项目git管理。
                也可以在POM里配置。优点是可以受git管理，缺点是每个项目的pom你都得配置。
                maven自动下载依赖时，会涉级读取三个配置文件，分别是项目下的POM文件、home目录下的.m2/settings.xml与Maven全局配置settings.xml ，后面两者不难理解，就像linux下的用户一样，有一个/etc/profile ，home目录下还有一个.bash_profile 文件是一样的，用户自定义配置会覆盖全局配置。
                三者的级先是 pom.xml > /home_dir/.m2/settings.xml > /maven_dir/conf/settings.xml

                总结： 相对来说，在POM中配置远程仓库比较好，项目代码放到哪都没有问题。
            -->
            <repositories>
                <!-- 按顺序搜索jar包，最后找默认的中央仓库。若将id=central的仓库放在最前就直接去中央仓库搜索 -->
                <repository>
                    <id>central</id> <!-- repository的唯一标识。可用其创建镜像引用，用作备用下载站点。maven把id=central的仓库做为中央仓库，修改central的url是无效的 -->
                    <name>Central Repository</name> <!-- 仓库的名称，为了方便人阅读，无其他作用 -->
                    <url>https://repo.maven.apache.org/maven2/</url> <!-- 仓库的地址 -->
                    <layout>default</layout> <!-- default:Maven2/3的布局，legacy:Maven 1.x的布局 -->
                    <releases> <!-- 控制Maven对于发布版构件的下载 -->
                        <enabled>true</enabled> <!-- 开启nexus-releases仓库的发布版本下载支持 -->
                        <updatePolicy>daily</updatePolicy> <!-- 检查更新的频率，默认值是daily，表示Maven每天检查一次 -->
                    </releases>
                    <snapshots> <!-- 控制Maven对于快照版构件的下载 -->
                        <enabled>false</enabled> <!-- 关闭nexus-releases仓库的快照版本下载支持 -->
                        <updatePolicy>daily</updatePolicy>
                    </snapshots>
                </repository>

                <repository>
                    <id>aliyun</id>
                    <name>Aliyun Repository</name>
                    <url>https://maven.aliyun.com/repository/public</url>
                    <layout>default</layout>
                    <releases>
                        <enabled>true</enabled>
                        <updatePolicy>daily</updatePolicy>
                    </releases>
                    <snapshots>
                        <enabled>false</enabled>
                        <updatePolicy>daily</updatePolicy>
                    </snapshots>
                </repository>
            </repositories>

            <pluginRepositories>
                <pluginRepository>
                    <id>central-plugin</id>
                    <name>Central Plugin</name>
                    <url>https://repo.maven.apache.org/maven2/</url>
                    <layout>default</layout>
                    <releases>
                        <enabled>true</enabled>
                    </releases>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                </pluginRepository>

                <pluginRepository>
                    <id>aliyun-plugin</id>
                    <name>Aliyun Plugin</name>
                    <url>https://maven.aliyun.com/repository/public</url>
                    <layout>default</layout>
                    <releases>
                        <enabled>true</enabled>
                    </releases>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                </pluginRepository>
            </pluginRepositories>
            <!-- ********************************************* 仓库配置 end ********************************************* -->

            <!-- 部署构件至远程仓库，mvn deploy 用来将项目生成的构件分发到远程Maven仓库-->
            <distributionManagement>
                <repository>
                    <id>nexus-releases</id> <!-- repository的唯一标识 -->
                    <name>Demo Release Repository</name> <!-- name是人类可读的形式 -->
                    <url>http://192.168.3.206:8081/nexus/content/repositories/releases</url>
                    <layout>default</layout>
                    <uniqueVersion>false</uniqueVersion> <!-- true:为部署到仓库的构件分配一个由时间戳和内部版本号组成的唯一版本，false:每次都使用相同的版本 -->
                </repository>
                <snapshotRepository>
                    <id>nexus-snapshots</id>
                    <name>Demo Snapshot Repository</name>
                    <url>http://192.168.3.206:8081/nexus/content/repositories/snapshots</url>
                    <layout>default</layout>
                    <uniqueVersion>true</uniqueVersion>
                </snapshotRepository>
            </distributionManagement>
        </profile>

        <profile>
            <!--
                https://cmc.centralrepo.rnd.huawei.com/maven/       传输成功，东莞-通用区-Maven中心仓库
                https://mirrors.tools.huawei.com/maven/             传输成功，内网仓库
                https://mirrors.huaweicloud.com/repository/maven/   传输失败，huawei外网仓库
                https://repo.huaweicloud.com/repository/maven/      传输失败，外网仓库
                https://repo.maven.apache.org/maven2/               传输失败，apache中央仓库
            -->
            <id>repo-company</id>
            <repositories>
                <repository>
                    <id>company</id>
                    <name>Company Repository</name>
                    <url>https://mirrors.tools.huawei.com/maven/</url>
                    <layout>default</layout>
                    <releases>
                        <enabled>true</enabled>
                    </releases>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                </repository>
            </repositories>

            <pluginRepositories>
                <pluginRepository>
                    <id>company-plugin</id>
                    <name>Company Plugin</name>
                    <url>https://mirrors.tools.huawei.com/maven/</url>
                    <layout>default</layout>
                    <releases>
                        <enabled>true</enabled>
                    </releases>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                </pluginRepository>
            </pluginRepositories>
        </profile>
    </profiles>
</project>
