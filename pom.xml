<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.zhaolq.mars</groupId>
    <artifactId>mars-parent</artifactId>
    <packaging>pom</packaging>
    <version>1.0.0-deluxe</version>

    <name>${project.artifactId}</name>
    <url>https://blog.zhaolq.com</url>
    <description>火星计划</description>

    <modules>
        <module>mars-common-parent</module>
        <module>mars-demo-parent</module>
        <module>mars-service-parent</module>
        <module>mars-tool-parent</module>
        <module>mars-zoo-parent</module>
        <module>mars-api-parent</module>
    </modules>

<!--
    配置maven仓库，可以在maven的settings.xml里改。优点是全局统一配置，缺点是不受你项目git管理。
    也可以直接在pom.xml里改, 好处就是 可以受git管理，缺点是每个项目的pom你都得配置。
    maven自动下载依赖时，会涉级读取三个配置文件，分别是项目下的pom.xml 文件 、home目录下的.m2/settings.xml 与 maven 全局配置settings.xml ，后面两者不难理解，就像linux下的用户一样，有一个/etc/profile ，用户用目录下还有一个.bash_profile 文件是一样的，用户自定义配置会覆盖全局配置。
    三者的级先是 pom.xml > /home_dir/.m2/settings.xml > /maven_dir/conf/settings.xml

    总结： 相对来说，在pom中配置maven仓库比较好，项目代码放到哪都没有问题。
-->

    <!--
        pom.xml文件中定义的变量在resources文件夹下的 properties、yml、xml 文件中可以获得
        .properties文件中定义的变量在java代码中通过 java.util.Properties 可以获得
    -->
    <profiles>
        <profile>
            <id>dev</id> <!-- 开发环境 -->
            <activation>
                <activeByDefault>true</activeByDefault> <!-- 默认激活该profile -->
            </activation>
            <properties>
                <db.driver>com.mysql.jdbc.Driver</db.driver>
                <db.url>jdbc:mysql//localhost:3306/dev</db.url>
                <db.user>dev</db.user>
                <db.pw>dev-pwd</db.pw>
            </properties>
        </profile>

        <profile>
            <id>test</id> <!-- 测试环境 -->
            <properties>
                <db.driver>com.mysql.jdbc.Driver</db.driver>
                <db.url>jdbc:mysql//localhost:3306/test</db.url>
                <db.user>test</db.user>
                <db.pw>test-pwd</db.pw>
            </properties>
        </profile>
    </profiles>

    <properties>
        <!-- 升级JDK11需要合适的Maven版本用于构建 -->
        <java.version>11</java.version>
        <!-- ${maven.build.timestamp}获取时间 -->
        <maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>

        <!-- 优先级低于maven-compiler-plugin插件中的配置 -->
        <!-- 新的release选项需要JDK版本支持(详见源码since标签) -->
        <!-- 这里的配置不知道什么时候有效，建议在plugin中配置，后期需要将这里的配置删除，提取全局java版本和编码变量 -->
        <maven.compiler.release>${java.version}</maven.compiler.release>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>
        <maven.resources.encoding>UTF-8</maven.resources.encoding>

        <!-- maven-resources-plugin将自动使用此编码 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- 配置所有Maven插件输出的报告编码 -->
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <spring-boot.version>2.3.10.RELEASE</spring-boot.version>
        <spring-boot-maven-plugin.version>2.3.12.RELEASE</spring-boot-maven-plugin.version>
        <spring-cloud.version>Hoxton.SR12</spring-cloud.version>

        <junit-bom.version>5.8.2</junit-bom.version>

        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>
        <maven-jar-plugin.version>3.2.0</maven-jar-plugin.version>
        <maven-dependency-plugin.version>3.1.2</maven-dependency-plugin.version>
        <maven-javadoc-plugin.version>3.2.0</maven-javadoc-plugin.version>
        <maven-source-plugin.version>3.2.1</maven-source-plugin.version>
        <maven-war-plugin.version>3.2.3</maven-war-plugin.version>
        <maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.version>
        <maven-shade-plugin.version>3.2.4</maven-shade-plugin.version>
        <maven-assembly-plugin.version>3.2.0</maven-assembly-plugin.version>

        <build-helper-maven-plugin.version>3.3.0</build-helper-maven-plugin.version>

        <!--<suiteXmlFile>testing.xml</suiteXmlFile>-->

        <lombok.version>1.18.22</lombok.version>
        <fastjson.version>2.0.2</fastjson.version>
        <commons-lang3.version>3.12.0</commons-lang3.version>
        <commons-math3.version>3.6.1</commons-math3.version>
        <commons-collections4.version>4.4</commons-collections4.version>
        <commons-io.version>2.11.0</commons-io.version>
        <commons-configuration2.version>2.8.0</commons-configuration2.version>
        <commons-dbutils.version>1.7</commons-dbutils.version>
        <commons-beanutils.version>1.9.4</commons-beanutils.version>
        <hutool-all.version>5.8.0</hutool-all.version>

        <ojdbc8.version>21.5.0.0</ojdbc8.version>
        <postgresql.version>42.3.3</postgresql.version>
        <mysql-connector-java.version>8.0.31</mysql-connector-java.version>
        <ImpalaJDBC42.version>2.6.26.1031</ImpalaJDBC42.version>

        <springfox-boot-starter.version>3.0.0</springfox-boot-starter.version>

        <!-- MyBatis-Plus和boot-starter版本号对应 -->
        <mybatis-plus-boot-starter.version>3.5.1</mybatis-plus-boot-starter.version>
        <mybatis-plus-generator.version>3.5.1</mybatis-plus-generator.version>
        <!-- MyBatis分页插件PageHelper -->
        <pagehelper-spring-boot-starter.version>1.4.1</pagehelper-spring-boot-starter.version>

        <auto-service.version>1.0.1</auto-service.version>
        <javapoet.version>1.13.0</javapoet.version>

        <log4j2.version>2.18.0</log4j2.version>
        <disruptor.version>3.4.2</disruptor.version>
        <poi.version>4.1.2</poi.version>

        <selenium-java.version>4.1.4</selenium-java.version>
        <jsoup.version>1.15.1</jsoup.version>
        <webdrivermanager.version>5.1.1</webdrivermanager.version>

    </properties>

    <dependencies>
        <!-- 为了避免循环依赖，请不要依赖子模块 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <!-- 提供的，可以理解为此包不由我直接提供，需要调用者/容器提供。 -->
            <scope>provided</scope>
            <!-- 可选的，可以理解为此功能/此依赖可选，如果不需要某项功能，可以不引用这个包 -->
            <!-- <optional>true</optional> -->
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <!-- 排除对 JUnit 4 的支持 -->
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${junit-bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            
            
            <!--******************************** jdbc ********************************-->
            <!-- 覆盖Spring Boot提供的ojdbc -->
            <dependency>
                <groupId>com.oracle.database.jdbc</groupId>
                <artifactId>ojdbc8</artifactId>
                <version>${ojdbc8.version}</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>com.oracle.database.nls</groupId>
                <artifactId>orai18n</artifactId>
                <version>${ojdbc8.version}</version>
                <scope>runtime</scope>
            </dependency>

            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>${postgresql.version}</version>
                <scope>runtime</scope>
            </dependency>

            <dependency>
                <groupId>com.mysql</groupId>
                <artifactId>mysql-connector-j</artifactId>
                <version>${mysql-connector-java.version}</version>
                <scope>runtime</scope>
            </dependency>
                 
            <dependency>
                <groupId>Impala</groupId>
                <artifactId>ImpalaJDBC42</artifactId>
                <version>${ImpalaJDBC42.version}</version>
                <scope>runtime</scope>
            </dependency>
            <!--******************************** jdbc ********************************-->

            <!-- 覆盖应写在上面 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <!-- 此元素指定包含项目源的目录。生成的构建系统将在构建项目时编译此目录中的源代码。给定的路径是相对于项目描述符的。 -->
        <!--<sourceDirectory>${project.basedir}/src/main/java</sourceDirectory>-->
        <!-- 构建生成的所有文件都放置在这个目录。 -->
        <!--<directory>${project.basedir}/target/${project.version}</directory>-->
        <!-- 打包的文件名（不包括扩展名，并且没有路径信息），这里配置成与项目名称相同。默认值是 ${artifactId}-${version} -->
        <finalName>${project.artifactId}-${project.version}</finalName>
        <!-- 此元素描述了所有 classpath 路径下资源，例如：.java文件、与项目关联的属性文件等。这些资源通常包含在最终软件包中。
        用以规定哪些文件可以编译到target/classes。打包插件默认把target/classes目录下的所有内容打进jar包或者war包。修改配置后请确认target/classes目录内容。 -->
        <resources>

            <!-- 控制资源文件的拷贝(默认复制到classes目录，最后打进jar包) -->
            <resource>
                <!-- 设定主资源目录  -->
                <directory>${project.basedir}/src/main/java</directory>
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目录下的资源文件时，只处理如下配置中包含的资源类型 -->
                <includes>
                    <include>**/*.xml</include>
                    <include>**/*.properties</include>
                </includes>
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目录下的资源文件时，不处理如下配置中包含的资源类型（剔除下如下配置中包含的资源类型）-->
                <excludes>
                    <exclude>**/*.yaml</exclude>
                </excludes>
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，是否对主资源目录开启资源过滤 -->
                <filtering>true</filtering>
                <!-- maven default生命周期，process-resources阶段执行maven-resources-plugin插件的resources目标处理主资源目下的资源文件时，指定处理后的资源文件输出目录，默认是${project.build.outputDirectory}指定的目录-->
                <targetPath>${project.build.outputDirectory}</targetPath>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <filtering>true</filtering>
                <targetPath>${project.build.outputDirectory}</targetPath>
            </resource>


            <!-- 配置文件外置，即提取配置文件到target目录。下面的配置是默认的，注释后效果相同 -->
            <resource>
                <directory>${project.basedir}/src/main/resources/config</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <targetPath>${project.basedir}/target/config</targetPath>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources/deployment/config</directory>
                <includes>
                    <include>*.ini</include>
                </includes>
                <targetPath>${project.basedir}/target/config</targetPath>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources/deployment/bin</directory>
                <includes>
                    <include>*.sh</include>
                </includes>
                <targetPath>${project.basedir}/target/bin</targetPath>
            </resource>

        </resources>
        <plugins>
            <!--
                为了使项目结构更为清晰，Maven区别对待Java代码文件和资源文件：
                    maven-compiler-plugin用来编译Java代码
                    maven-resources-plugin资源插件处理项目资源到输出目录的复制。有两种不同的资源：主资源和测试资源。区别在于，主要资源是与主要源代码关联的资源，而测试资源是与测试源代码关联的资源。
                    参考链接：https://blog.csdn.net/u011781521/article/details/79052725
                idea中maven-compiler-plugin插件编译时控制台乱码问题参考链接：
                    https://blog.csdn.net/qq_37823003/article/details/109480305
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <!-- release选项从JDK9开始支持(详见源码since标签)，该选项替换了三个标志：-source，-target和-bootclasspath -->
                    <release>${maven.compiler.release}</release>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                    <encoding>${maven.compiler.encoding}</encoding>
                    <fork>true</fork>
                    <!-- 跳过编译的文件 -->
                    <excludes>
                        <exclude>**/ExcludeClassesName.java</exclude> <!-- 排除应用程序编译类 -->
                    </excludes>
                </configuration>
            </plugin>
            <!-- 解决资源文件的编码问题 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-resources-plugin.version}</version>
                <configuration>
                    <encoding>${maven.resources.encoding}</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${maven-javadoc-plugin.version}</version>
                <configuration>
                    <release>${java.version}</release>
                    <encoding>UTF-8</encoding>
                    <doclint>none</doclint>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id> <!-- 唯一标识，运行maven时会在控制台输出 -->
                        <!-- 绑定到声明周期阶段deploy，默认是package。避免在package时执行此插件目标 -->
                        <phase>package</phase>
                        <goals>
                            <!-- 绑定到此插件的jar目标。jar和javadoc-no-fork区别：
                                    jar目标默认绑定到生命周期阶段package，会生成JavaDoc文档并捆绑到jar文件中。
                                    javadoc-no-fork目标需要在站点生成之前生成源，例如，通过调用mvn clean deploy site。生成的JavaDoc文档在target/site下，不会捆绑到jar文件中。 -->
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- 打源码包 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>${maven-source-plugin.version}</version>
                <configuration>
                    <outputDirectory>${project.build.directory}</outputDirectory>
                    <finalName>${project.build.finalName}</finalName>
                    <attach>true</attach>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <!-- 绑定到声明周期阶段deploy，默认是package。避免在package时执行此插件目标 -->
                        <phase>package</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- default声明周期的test阶段默认绑定了maven-surefire-plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <skipTests>true</skipTests>
                    <argLine>-Dfile.encoding=UTF-8</argLine>
                    <parallel>all</parallel>
                    <threadCount>10</threadCount> <!-- 与parallel参数结合使用 -->
                    <!-- 设置为错误/失败计数以跳过其余测试 -->
                    <skipAfterFailureCount>1</skipAfterFailureCount> <!-- 当有一个测试用例发生错误或失败时，跳过后续其他测试 -->
                    <!-- 测试失败后的重试次数。当测试含有远程服务时，在某些情况下可能由于环境问题(比如网络)导致测试用例执行失败，但这并不是程序问题。换句话说,当一个测试用例执行N次,有一次执行成功就认为成功. -->
                    <rerunFailingTestsCount>2</rerunFailingTestsCount> <!-- 两次重试机会 -->
                    <includes>
                        <include>*</include>
                    </includes>
                    <excludes>
                        <exclude>**/mapper/*</exclude>
                        <exclude>**/controller/*</exclude>
                        <exclude>**/service/*</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <!-- build-helper-maven-plugin 是Maven 开源插件生态圈中org.codehaus.mojo 这个分组中的，这个分组是次要分组（二级分组）；一级分组是org.apache.maven.plugins这一组。 -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>${build-helper-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>timestamp-property</id>
                        <goals>
                            <goal>timestamp-property</goal>
                        </goals>
                        <configuration>
                            <name>build.time</name>
                            <pattern>yyyyMMddHHmmss</pattern>
                            <locale>zh_CN</locale>
                            <timeZone>Asia/Shanghai</timeZone>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <!-- 官方配置文档：https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/html/ -->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot-maven-plugin.version}</version>
                    <configuration>
                        <outputFile>${project.build.outputDirectory}/META-INF/build-info.properties</outputFile>
                        <!-- 跳过执行：设置true时，打成普通jar包(不可执行)，和使用maven-jar-plugin打的jar包相同。 -->
                        <skip>false</skip>
                        <fork>true</fork>
                        <!-- repackage的包名 = finalName-classifier -->
                        <finalName>${project.build.finalName}</finalName>
                        <classifier>startup</classifier>
                    </configuration>
                    <executions>
                        <execution>
                            <phase>package</phase> <!--默认package阶段 -->
                            <goals>
                                <!-- 多个执行目标 -->
                                <goal>build-info</goal>
                                <goal>repackage</goal>
                                <!--
                                    由于maven-jar-plugin和spring-boot-maven-plugin都在package阶段运行，因此首先定义maven-jar-plugin
                                    是很重要的（以便它在repackage目标之前运行）。repackage目标会在maven-jar-plugin打包后再次打成可执行的
                                    jar或war包。
                                -->
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <repositories>
        <!-- 按顺序搜索jar包，最后找默认的中央仓库。若将id=central的仓库放在最前就直接去中央仓库搜索 -->
        <!-- maven把id=central的仓库做为中央仓库 -->
        <repository>
            <id>central</id>
            <name>Central Repository</name>
            <url>https://repo.maven.apache.org/maven2/</url>
            <layout>default</layout>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>

        <repository>
            <id>aliyun</id> <!-- 仓库声明的唯一id，中央仓库占用id:central。配置仓库镜像时用到。 -->
            <name>aliyun Repository</name> <!-- 仓库的名称，为了方便人阅读，无其他作用 -->
            <url>https://maven.aliyun.com/repository/public</url> <!-- 仓库的地址 -->
            <layout>default</layout> <!-- 仓库的布局是Maven2及Maven3的默认布局 -->
            <releases> <!-- 控制Maven对于发布版构件的下载 -->
                <enabled>true</enabled> <!-- 开启nexus-releases仓库的发布版本下载支持 -->
                <updatePolicy>daily</updatePolicy> <!-- 检查更新的频率，默认值是daily，表示Maven每天检查一次 -->
                <checksumPolicy>warn</checksumPolicy> <!-- 配置Maven检查校验和文件的策略 -->
            </releases>
            <snapshots> <!-- 控制Maven对于快照版构件的下载 -->
                <enabled>false</enabled> <!-- 关闭nexus-releases仓库的快照版本下载支持 -->
                <updatePolicy>daily</updatePolicy>
                <checksumPolicy>warn</checksumPolicy>
            </snapshots>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>central</id>
            <name>Central Plugin</name>
            <url>https://repo.maven.apache.org/maven2/</url>
            <layout>default</layout>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>

        <pluginRepository>
            <id>aliyun</id>
            <name>aliyun Plugin</name>
            <url>https://maven.aliyun.com/repository/public</url>
            <layout>default</layout>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

    <!-- 部署构件至远程仓库 -->
    <distributionManagement>
        <repository>
            <id>nexus-releases</id>
            <name>Demo Release Repository</name>
            <url>http://192.168.3.206:8081/nexus/content/repositories/releases</url>
        </repository>
        <snapshotRepository>
            <id>nexus-snapshots</id>
            <name>Demo Snapshot Repository</name>
            <url>http://192.168.3.206:8081/nexus/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>

</project>
